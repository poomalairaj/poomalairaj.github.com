<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Poomalairaj's weblog</title><link href="/" rel="alternate"></link><link href="/feeds/tech.atom.xml" rel="self"></link><id>/</id><updated>2014-11-10T12:12:00+05:30</updated><entry><title>Book Review: Mastering Web Application Development with Express</title><link href="/mastering-webapp-express-book-review.html" rel="alternate"></link><updated>2014-11-10T12:12:00+05:30</updated><author><name>Poomalairaj</name></author><id>tag:,2014-11-10:mastering-webapp-express-book-review.html</id><summary type="html">&lt;p&gt;&lt;img alt="Mastering Web Application Development with Express" src="/static/img/mastering-webapp-dev-express.jpg" /&gt;&lt;/p&gt;
&lt;h3&gt;TL;DR&lt;/h3&gt;
&lt;p&gt;This is a fantastic book for learning web application development using express on node.js by Alexandru Vlăduțu. The book covers express 4.x. This book covers almost all aspects of node.js development like http, validations, templating, testing, API development, best practices and lot more. The book introduces many fantastic node.js modules which can be helpful for a node.js web development. This is one of the best book you can find for learning and mastering express/node.js&lt;/p&gt;
&lt;h3&gt;You should get this book&lt;/h3&gt;
&lt;p&gt;Because&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You are using/planning to use node.js for your project&lt;/li&gt;
&lt;li&gt;node.js platform seems a bit overwhelming for you&lt;/li&gt;
&lt;li&gt;It covers express 4.x&lt;/li&gt;
&lt;li&gt;It gives you lots of example code and the code is of good quality&lt;/li&gt;
&lt;li&gt;Node.js modules are fragmented. This book gives you good intro to some of the best npm modules and tools&lt;/li&gt;
&lt;li&gt;You are interested in test first development approach&lt;/li&gt;
&lt;li&gt;It is well written and cool&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Initial thoughts&lt;/h3&gt;
&lt;p&gt;When I started reading this book for the first time, I got a weird feeling. For example, in the first chapter there is a section to compare express with other frameworks but it doesn't actually compares express with other frameworks. At least in the conventional framework comparison sense. Very first command to install node applications uses some weird characters for hyphen in &lt;code&gt;npm install –save mongoose async pwd connect-flash connect-multiparty&lt;/code&gt;. The command wouldn't work as expected if you just copy and paste. I guess they missed these hypen issue in proof reading.&lt;/p&gt;
&lt;p&gt;The book breaks some of the common pattern of any node.js book such as introduction to node.js, who developed it and Google's V8 engine blah blah. But the author could have at least introduced about how to install node.js and npm. A newbie to node.js following this book can have a hard time to execute &lt;code&gt;npm&lt;/code&gt; command for the first time if they haven't installed it already. The very first command uses &lt;code&gt;express&lt;/code&gt; to create &lt;code&gt;FileManager app&lt;/code&gt; and the author missed to introduce on how to install express command.&lt;/p&gt;
&lt;p&gt;It looks like the author assumes that the reader must have a basic understanding of node.js application development. After all the book is "Mastering" series. A reader can google the missing parts easily however the author could have explained "kick start" things clearly. Another confusing thing was the code for &lt;code&gt;lib/db.js&lt;/code&gt; has a comment stating that the code must be moved from app.js to here. It was hard to find the code for that. However, To make life easier, I just took the code from the github repo of the author.&lt;/p&gt;
&lt;p&gt;The author uses the term &lt;code&gt;routes&lt;/code&gt; for a controllers feels a bit unusual.&lt;/p&gt;
&lt;h3&gt;Diving in&lt;/h3&gt;
&lt;p&gt;Apart from these initial glitches, the book is very well written and covers almost everything you need to know about express framework as well as node.js itself. Once you complete the FileManager project from the first chapter, you will become comfortable developing with express. The project covers some of the frequently used aspects of web development like source file organization, CRUD operations, session, file upload and basic error handling. A newbie might find the code in this chapter a bit overwhelming because you have to read a whole chapter just to arrive to a point to execute the application. The author doesn't tell you how to run the code till the end of the first chapter.&lt;/p&gt;
&lt;p&gt;The book goes on to explain about middlewares in the next chapter. The author introduces new things along the way such as introduction of &lt;code&gt;ejs&lt;/code&gt;. The author aptly selects the projects to explain different aspects of express. The caching middleware is one such example. The author explains how middleware works internally, how to create your own middleware and configurable middlewares. There is also an example for mounting sub applications in this chapter which introduces isolated mountable sub applications that make modular application development.&lt;/p&gt;
&lt;h3&gt;RESTful APIs&lt;/h3&gt;
&lt;p&gt;These days every web application needs to provide some kind of API to their users. It is very natural to develop RESTful API's with express. A whole chapter is dedicated to development of RESTful APIs with express. The author starts by explaining about RESTfulness and explains about http verbs and status codes. It felt like the author could have skipped the detailed intro of http and status codes. Just a link to wikipedia article could have been sufficient. This chapter takes an example application called &lt;code&gt;SmartNotes&lt;/code&gt;. The author simulates typical development cycle with requirements, API design, implementation, validation and tuning with the development of this example application.&lt;/p&gt;
&lt;p&gt;This sample application is developed in TDD style. Test suites are developed before even the development of real application. TDD is one of the aspects of Extreme programming. The author also introduces some useful node.js modules in this chapter to help API versioning and throttling the API.&lt;/p&gt;
&lt;h3&gt;Templating&lt;/h3&gt;
&lt;p&gt;A chapter is dedicated for template engines. This chapter explains about the types of templates, different templating engines and their styles. The author also explains some important aspects of templating like partials, layouts and template caching. Again the author introduces a fantastic module &lt;code&gt;consolidate.js&lt;/code&gt; to use any template engine with express with minimal effort.&lt;/p&gt;
&lt;h3&gt;DRY code base&lt;/h3&gt;
&lt;p&gt;It is clear that the author emphasizes on clean and efficient code throughout the book. Every example explains how to develop quality software with node.js and express. A chapter explains solely about DRY principles. The author takes an example application called &lt;code&gt;MovieApp&lt;/code&gt; which is again an API app. He starts to develop the application normally and then tunes the application using DRY principles and makes it better. The author introduces many tricks and tidbits to handle repeating real world problems in web app development.&lt;/p&gt;
&lt;h3&gt;Error handling&lt;/h3&gt;
&lt;p&gt;If there is one thing that many web developers slip often is error handling. Many times, developers build applications with the best case scenario in mind and skip worst cases altogether. This leads to uncaught exceptions and run time errors. Error handling, express' error handler, custom error handlers, logging errors are introduced in this chapter. This chapter also explains very well about stack traces and improving stack traces.&lt;/p&gt;
&lt;h3&gt;Performance&lt;/h3&gt;
&lt;p&gt;Once an application is built, it must be tuned to withstand real world traffic. This chapter explains how to improve the performance of the application by caching, serving https using stud, caching templates, compress and minifying, caching header management, use of cdns etc.&lt;/p&gt;
&lt;h3&gt;Monitoring, Debugging and Security&lt;/h3&gt;
&lt;p&gt;We have two chapters dedicated for monitoring live application, debugging and application security.
Javascript's event based nature and callbacks makes debugging hard. Fear not! There is a chapter to effectively debug your buggy express application. Another chapter helps to understand various security issues and how to improve security of node.js application.&lt;/p&gt;
&lt;h3&gt;Testing&lt;/h3&gt;
&lt;p&gt;Final chapter talks about testing and code quality. Though we had an introduction of TDD and test first approach in third chapter, the final chapter gives us a good grasp on improving code quality. There are many testing frameworks available for node.js. The author introduces some of the very useful testing modules to make testing a breeze. As part of improving code quality, this chapter gives us a peek into git, Continuous Integration, code lint and client side testing.&lt;/p&gt;
&lt;h3&gt;Final thoughts&lt;/h3&gt;
&lt;p&gt;I had negative feelings when I started out this book but it turned very positive as I continue to read it. I had tried couple of books on node.js and express. Many of the books are outdated now and they lacked enough example code; Even books with title "Recipes".&lt;/p&gt;
&lt;p&gt;You need to have experience in web development to follow this book. If you are an absolute beginner, I would suggest you to research and read more about web development and node.js to follow with this book. This book can also be used as a reference book for node.js development and best practices of development in general.&lt;/p&gt;
&lt;p&gt;One of the problems with npm packages is that you never know which one is the best for a particular purpose. You have thousands of modules. As this platform is an evolving one, API's frequently change. Backward compatibility is often broken. You need an up to date book to keep up with this. Even though the title of the books says that it is about express, it explains many aspects of node.js and npm modules.&lt;/p&gt;</summary><category term="nodejs"></category><category term="review"></category></entry><entry><title>Raspberry Pi as DLNA/UPnP media server + WIFI to Wired Ethernet NAT</title><link href="/raspberrypi-dlna-upnp-server.html" rel="alternate"></link><updated>2014-08-19T13:55:00+05:30</updated><author><name>Poomalairaj</name></author><id>tag:,2014-08-19:raspberrypi-dlna-upnp-server.html</id><summary type="html">&lt;h3&gt;Need for a media server&lt;/h3&gt;
&lt;p&gt;I have lot of media files spread across many devices in my home. I have photos, videos, movies and music files stored in laptop, desktop, android phones and Nexus 7 tablet. It is frustrating to find that the video I want to watch is stored in desktop when I try to access it from my Nexus 4. This happens all the time. I have to search for data cable to copy the file from one device to another.&lt;/p&gt;
&lt;p&gt;Another thing is that the mobile devices are limited in memory. I have to delete files every now and then just to copy new files. How would it be if I can put all my media files in a single location and access them from all the devices in my home? I've got a Raspberry Pi as a gift. The Pi is a natural fit for any project that needs a computer to be running all the time without consuming much power. So I decided to do this project with my Raspberry Pi.&lt;/p&gt;
&lt;h3&gt;What I needed&lt;/h3&gt;
&lt;p&gt;A DLNA/UPnP server which can serve photos, videos and audio. A DHCP/DNS Server which can be used as ad blocking DNS server. The server should always be on.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Raspberry Pi" src="/static/img/rpi-minidlna/rpi.jpg" title="Raspberry Pi Model B" /&gt;&lt;/p&gt;
&lt;h4&gt;The Hardware&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The computer - Raspberry Pi (Model B 512 MB RAM)&lt;/li&gt;
&lt;li&gt;USB Wifi adaptor - COMFAST 150 Mbps wifi dongle&lt;/li&gt;
&lt;li&gt;SD card - Strontium 16 GB micro SD with SD adaptor&lt;/li&gt;
&lt;li&gt;Power supply - DC - DC power supply board from Ebay&lt;/li&gt;
&lt;li&gt;Ethernet cables&lt;/li&gt;
&lt;li&gt;Netgear Router&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Software&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Arch Linux for Arm&lt;/li&gt;
&lt;li&gt;minidlna&lt;/li&gt;
&lt;li&gt;dnsmasq&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Why I needed NAT&lt;/h3&gt;
&lt;p&gt;I have a &lt;a href="http://blog.johnsiraani.com/data-card-review-huaweie8231/"&gt;Huawei E8231&lt;/a&gt; 3G modem. The modem has built-in wifi hotspot so I am running the modem all the time and it is the gateway of internet for all the devices in my home. At first I tried to install minidlna and served it on my data card's network. It turned out that my datacard's LAN is too slow to serve HD movies. Then I tried to connect Raspberry Pi to my Netgear router which also has wifi. Now I am getting a decent speed.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Netgear wifi router" src="/static/img/rpi-minidlna/netgear.jpg" title="Netgear wifi router" /&gt;&lt;/p&gt;
&lt;p&gt;Now the problem is that Netgear router doesn't have Internet connection. It is just connected to power and Raspberry Pi. This makes all other devices connected to Netgear's network not able to be connected to Internet. If I can make Raspberry Pi as a router, I can forward Internet packets from usb wifi to the Ethernet port of Raspberry Pi. Simple &lt;code&gt;iptables&lt;/code&gt; rules could make Raspberry Pi as a NAT and Internet is supplied to the Netgear router. Thus all the devices connected to Netgear can access Internet as well as UPnP media service. As a positive side effect, this setup extended the range of my home wifi connection.&lt;/p&gt;
&lt;h3&gt;Power Supply&lt;/h3&gt;
&lt;p&gt;In Chennai, we have frequent power outages. I decided to use a dc-dc power supply board (can be bought from ebay for as cheap as Rs. 200) with my UPS battery. The UPS battery is 12 volts and the DC-DC power supply board can supply up to 2A current which is enough to run Raspberry Pi without any problems. I directly connected the 12v supply from battery to the power supply board and took 5v output to Raspberry Pi through USB cable.&lt;/p&gt;
&lt;p&gt;I also connected a molex connector to the power supply board so that I can use it in the future with my internal HDD with this power supply (of course with a PATA/SATA to USB bridge). I used a spare food container as a box for the power supply and connected a USB cable. Now the power supply is ready.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Here is my DC-DC Power supply inside a food container box&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="DC-DC Power Supply 1" src="/static/img/rpi-minidlna/dc-dc-power-board-1.jpg" title="DC-DC Power Supply" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="DC-DC Power Supply 2" src="/static/img/rpi-minidlna/dc-dc-power-board-2.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="USB cable" src="/static/img/rpi-minidlna/usb-cable.jpg" title="USB Cable" /&gt;&lt;/p&gt;
&lt;h3&gt;Network addresses&lt;/h3&gt;
&lt;p&gt;Following are the network addresses for the setup.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Huawei data card ip address - 192.168.8.1 (IP range 192.168.8.1 to 192.168.8.150)&lt;/li&gt;
&lt;li&gt;Raspberry Pi wlan0 - 192.168.8.30 (statically set in netctl profile)&lt;/li&gt;
&lt;li&gt;Raspberry Pi eth0 - 192.168.0.30 (statically set in netctl profile and acts as NAT)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Raspberry Pi receives internet connection from data card and forward the Internet to ethernet port. The ethernet port is connected to Netgear router. Please note that the cable from RPi &lt;em&gt;should not&lt;/em&gt; be connected to the internet port of the Netgear router. If you do, the router will act as a router and it provides its own IP range to the clients connected to it which is not desired.&lt;/p&gt;
&lt;p&gt;Because I want to have Raspberry Pi and all devices in home in the same network. In my case, the internet port is Yellow color and 4 client ports are black (Have a look the router image above). The cable from RPi should be connected to one of the black colored client port (i.e., non Internet Port) 
Essentially we are using Netgear router as a wireless switch instead of &lt;em&gt;router&lt;/em&gt;. I also diasbled DHCP server in the router. The DHCP/DNS server runs in Raspberry Pi will take care of assigning ip addresses and resolving names.&lt;/p&gt;
&lt;h3&gt;The setup&lt;/h3&gt;
&lt;h4&gt;Install Arch Linux Arm&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Strontium 16GB microSD card" src="/static/img/rpi-minidlna/sd-card.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Insert the SD card to your PC and find the device name using &lt;code&gt;lsblk&lt;/code&gt;. In my case the device was &lt;code&gt;/dev/sdb&lt;/code&gt;.
Use &lt;code&gt;dd&lt;/code&gt; to write the Arch Linux image to the SD card&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;dd &lt;span class="nv"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;4M &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ArchLinuxARM-2014.06-rpi.img &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/sdb
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It might take some time and once it is done writing the image to the card, Remove the SD card from PC and insert it to Raspberry Pi SD card slot.
Connect HDMI port to display. Insert USB wifi adaptor and keyboard to the USB ports. Connect the power supply. In a few seconds Arch Linux should boot and ready for login.&lt;/p&gt;
&lt;p&gt;Login to Arch Linux with the username &lt;code&gt;root&lt;/code&gt; and password &lt;code&gt;root&lt;/code&gt;. &lt;/p&gt;
&lt;h4&gt;Wifi settings&lt;/h4&gt;
&lt;p&gt;&lt;img alt="ComFast mini wifi USB dongle" src="/static/img/rpi-minidlna/wifi.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Let's setup wifi. Edit the file &lt;code&gt;/etc/netctl/wifi&lt;/code&gt; with the following contents&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Home wifi network&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;Interface&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;wlan0
&lt;span class="nv"&gt;Connection&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;wireless
&lt;span class="nv"&gt;Security&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;wpa
&lt;span class="nv"&gt;ESSID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;xxxxx&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;yyyyy&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;IP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;static
&lt;span class="nv"&gt;Address&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;192.168.8.30/24&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;Gateway&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;192.168.8.1&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;DNS&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;192.168.8.1&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;ExecUpPost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/usr/bin/ntpd -gq || true&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Start wifi profile with netctl and enable it so that it loads on startup&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;netctl start wifi
netctl &lt;span class="nb"&gt;enable &lt;/span&gt;wifi
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Ethernet settings&lt;/h4&gt;
&lt;p&gt;Edit the file &lt;code&gt;/etc/netctl/eth0&lt;/code&gt; with the following contents&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;static ethernet connection acts as NAT&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;Interface&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;eth0
&lt;span class="nv"&gt;Connection&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ethernet
&lt;span class="nv"&gt;IP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;static
&lt;span class="nv"&gt;Address&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;192.168.0.30/24&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;DNS&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;192.168.0.30&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Execute &lt;code&gt;ifconfig&lt;/code&gt; and make sure that the ip of the interface &lt;code&gt;wlan0&lt;/code&gt; is set to &lt;code&gt;192.168.8.30&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Update packages and install &lt;code&gt;dnsmasq&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pacman -Sy
pacman -S dnsmasq
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Configuration of dnsmasq &lt;code&gt;/etc/dnsmasq.conf&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;domain-needed
bogus-priv
resolv-file&lt;span class="o"&gt;=&lt;/span&gt;/etc/resolv.dnsmasq.conf
&lt;span class="nv"&gt;interface&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;eth0
addn-hosts&lt;span class="o"&gt;=&lt;/span&gt;/etc/ad_block_hosts
dhcp-range&lt;span class="o"&gt;=&lt;/span&gt;192.168.0.50,192.168.0.150
dhcp-host&lt;span class="o"&gt;=&lt;/span&gt;00:11:22:33:44:55,compaq,192.168.0.50
dhcp-host&lt;span class="o"&gt;=&lt;/span&gt;00:11:22:33:44:55,nexus1,192.168.0.51
dhcp-host&lt;span class="o"&gt;=&lt;/span&gt;00:11:22:33:44:55,moto1,192.168.0.52
dhcp-host&lt;span class="o"&gt;=&lt;/span&gt;00:11:22:33:44:55,moto2,192.168.0.53
dhcp-host&lt;span class="o"&gt;=&lt;/span&gt;00:11:22:33:44:55,nexus2,192.168.0.54
dhcp-host&lt;span class="o"&gt;=&lt;/span&gt;00:11:22:33:44:55,dell,192.168.0.55
cache-size&lt;span class="o"&gt;=&lt;/span&gt;1500
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Edit &lt;code&gt;/etc/resolv.dnsmasq.conf&lt;/code&gt; with following contents&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;nameserver 8.8.8.8
nameserver 8.8.4.4
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I have also added ad blocking hosts file with dnsmasq so that ads will be blocked on my mobile devices. I downloaded one from http://winhelp2002.mvps.org/hosts.htm and moved the hosts file to &lt;code&gt;/etc/ad_block_hosts&lt;/code&gt;. Replaced all &lt;code&gt;0.0.0.0&lt;/code&gt; with '192.168.0.30`&lt;/p&gt;
&lt;p&gt;Start and enable dnsmasq&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;systemctl start dnsmasq
systemctl &lt;span class="nb"&gt;enable &lt;/span&gt;dnsmasq
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Setting up NAT to forward Internet to eth0&lt;/h3&gt;
&lt;p&gt;First enable ip forwarding&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sysctl net.ipv4.ip_forward&lt;span class="o"&gt;=&lt;/span&gt;1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To set ip forwarding permanently, edit &lt;code&gt;/etc/sysctl.d/30-ipforward.conf&lt;/code&gt; with the contents&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipv4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ip_forward&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipv6&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forwarding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipv6&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forwarding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To setup NAT I used iptables&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;iptables -t nat -A POSTROUTING -o wlan0 -j MASQUERADE
iptables -A FORWARD -i wlan0 -o eth0 -m state --state RELATED,ESTABLISHED -j ACCEPT
iptables -A FORWARD -i eth0 -o wlan0 -j ACCEPT
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To make these rules active upon rebooting, save the rules to &lt;code&gt;/etc/iptables/iptables.rules&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;iptables-save &amp;gt; /etc/iptables/iptables.rules
systemctl &lt;span class="nb"&gt;enable &lt;/span&gt;iptables.service
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Setup user account&lt;/h3&gt;
&lt;p&gt;I installed sudo and created a new user called &lt;code&gt;pi&lt;/code&gt;. The new user is added to wheel group so that I can use &lt;code&gt;sudo&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pacman -S sudo
useradd -s /bin/bash -m -g wheel pi
passwd pi
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pi&amp;quot;&lt;/span&gt; &amp;gt; /etc/hostname
hostname pi
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Setup minidlna&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Install minidlna&lt;/span&gt;
pacman -S minidlna

&lt;span class="c"&gt;# Change permissions of minidlna logs and db&lt;/span&gt;
sudo chown pi minidlna
sudo chown pi minidlna.log
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Edit &lt;code&gt;/etc/minidlna.conf&lt;/code&gt; with following &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Media directories from USB flash drive / HDD&lt;/span&gt;
&lt;span class="nv"&gt;media_dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;V,/mnt/movies
&lt;span class="nv"&gt;media_dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;V,/mnt/videos
&lt;span class="nv"&gt;media_dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;V,/mnt/videosongs
&lt;span class="nv"&gt;media_dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;A,/mnt/music
&lt;span class="nv"&gt;media_dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;P,/mnt/photos

&lt;span class="nv"&gt;db_dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/var/lib/minidlna
&lt;span class="nv"&gt;log_dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/var/log
&lt;span class="nv"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;8200
&lt;span class="nv"&gt;friendly_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Raspberry Pi UPnP
&lt;span class="nv"&gt;serial&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;12345678
&lt;span class="nv"&gt;model_number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1
&lt;span class="nv"&gt;album_art_names&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Cover.jpg/cover.jpg/AlbumArtSmall.jpg/albumartsmall.jpg/AlbumArt.jpg/albumart.jpg/Album.jpg/album.jpg/Folder.jpg/folder.jpg/Thumb.jpg/thumb.jpg
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Start and enable minidlna on startup&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo systemctl start minidlna
sudo systemctl &lt;span class="nb"&gt;enable &lt;/span&gt;minidlna
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Reboot&lt;/h3&gt;
&lt;p&gt;Now it's time to reboot the Pi.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;systemctl halt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I had a 16 GB pendrive lying around. For now it should be enough to test the installation. In the future I am going to buy a external USB HDD. In my case the usb flash drive is /dev/sda1 and the drive is formatted to ext4&lt;/p&gt;
&lt;p&gt;Unplug from monitor and remove HDMI cable. Remove keyboard and insert USB flash drive. I placed the pi near my battery and connected it to the powersupply.
If everything is fine, the pi should boot up and connect to Huawei data card wifi network. It should act as a DHCP server and assign ip addresses to the client devices connected to the netgear router.&lt;/p&gt;
&lt;h3&gt;Mount USB HDD&lt;/h3&gt;
&lt;p&gt;Connect to Netgear's wifi and connect to pi using ssh&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ssh pi@192.168.0.30

&lt;span class="c"&gt;# mount it at /mnt&lt;/span&gt;
mount /dev/sda1 /mnt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To make the mount permanent, edit &lt;code&gt;/etc/fstab&lt;/code&gt; with the following content&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;UUID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;88ac72a4-7324-8a85&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mnt&lt;/span&gt; &lt;span class="n"&gt;ext3&lt;/span&gt; &lt;span class="n"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now I opened up my laptop and connected to &lt;code&gt;media&lt;/code&gt; network. Fired up vlc. &lt;code&gt;ctrl + L&lt;/code&gt; to open playlist. Under 'local Network' section, find &lt;code&gt;Universal Plug'n'Play&lt;/code&gt;. It should show the Raspberry Pi minidlna server name. You can play movies and music under it.&lt;/p&gt;
&lt;p&gt;For mobile devices, I'm using Bubbleupnp which itself is a upnp server. For my purposes, it is enough to have upnp client. So I have disabled local media server in bubbleupnp.&lt;/p&gt;</summary><category term="raspberrypi"></category></entry><entry><title>Authentication fix of Owncloud 6 for webfaction hosting</title><link href="/authentication-fix-owncloud6-webfaction.html" rel="alternate"></link><updated>2014-07-14T17:40:00+05:30</updated><author><name>Poomalairaj</name></author><id>tag:,2014-07-14:authentication-fix-owncloud6-webfaction.html</id><summary type="html">&lt;h3&gt;Owncloud and me&lt;/h3&gt;
&lt;p&gt;I've been using owncloud ever since I switched to Nexus 4 from my beloved N900 since I didn't want to use google's services to store my contacts and calendars. Owncloud is a cool application to serve many of personal services like calendar, contacts, file sync, bookmarks, music etc. It becomes even cooler since you can sync/serve your data from your own infrastructure without relying on google or dropbox.&lt;/p&gt;
&lt;p&gt;I've been using OC5 for a long time and couple of days ago, I decided to upgrade to OC6. While upgrading to OC6 I remembered that I did some code change in the OC's core files to fix something but I couldn't remember what it was. I finally convinced that it could be some weird bug in OC that was not fixed at that time and assuming that OC6 might have a fix for that, I just went on to upgrade to OC6. I did backup and upgraded to OC6. Everything went fine and I was able to login to OC6 from the browser.&lt;/p&gt;
&lt;h3&gt;Basic Authentication &amp;amp; Webfaction&lt;/h3&gt;
&lt;p&gt;I tried to sync my contacts in my Nexus 4 using &lt;a href="https://play.google.com/store/apps/details?id=org.dmfs.carddav.sync" title="CardDav-Sync free Beta"&gt;carddav sync free&lt;/a&gt; and I got authentication error. Ah! This was the problem, I thought. Tried to downgrade to OC5, reinstalled couple of times. Nothing worked. Tried to install OC6 on my laptop and Bingo! it works fine. So this must be a problem with Webfaction. I raised a support ticket with webfaction. As always webfaction guys responded immediately with a fine solution.&lt;/p&gt;
&lt;p&gt;Basically, what Owncloud does is that it extracts the user name and password from HTTP header via mod_rewrite and provides it to PHP over environment variables. Unfortunately, webfaction has disabled this functionality for security reasons in their servers as they are using suExec.&lt;/p&gt;
&lt;h3&gt;The solution&lt;/h3&gt;
&lt;p&gt;However, there is a solution to this problem. We can not extract the authentication detials form http headers but we can send them to php over url via internal redirect using &lt;code&gt;.htaccess&lt;/code&gt; file. To achieve this, we need to insert the following rewrite condition to &lt;code&gt;.htaccess&lt;/code&gt; file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;RewriteCond&lt;/span&gt; %{HTTP:Authorization} ^Basic.*
&lt;span class="nb"&gt;RewriteRule&lt;/span&gt; ^(.*) $1?Authorization=%{HTTP:Authorization} [QSA,C]
&lt;span class="nb"&gt;RequestHeader&lt;/span&gt; unset Authorization
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This rule passes the Authorization information from http &lt;code&gt;Authorization&lt;/code&gt; header over a query string called &lt;code&gt;Authorization&lt;/code&gt; and sends it to php. Once done, unset the header variable &lt;code&gt;Authorization&lt;/code&gt; to prevent endless recursions.&lt;/p&gt;
&lt;p&gt;Now that we have set up rewrite rule to send authorization over http get, we can get it in php in $_GET super global array. We need to modify &lt;code&gt;lib/base.php&lt;/code&gt; and insert the following code inside init() around line 508.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// Get the authorization information from $_GET and use some regex&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;isset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_GET&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Authorization&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;preg_match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/Basic\s+(.*)$/i&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$_GET&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Authorization&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nv"&gt;$matches&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;explode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;base64_decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$matches&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;
    &lt;span class="nv"&gt;$_SERVER&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;PHP_AUTH_USER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;strip_tags&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$_SERVER&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;PHP_AUTH_PW&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;strip_tags&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$password&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now the authorization information is properly handled by Owncloud 6.&lt;/p&gt;
&lt;p&gt;Here is a code diff of this change&lt;/p&gt;
&lt;h3&gt;.htaccess&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gh"&gt;diff --git a/.htaccess b/.htaccess&lt;/span&gt;
&lt;span class="gh"&gt;index 4ba5095..d86453c 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/.htaccess&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/.htaccess&lt;/span&gt;
&lt;span class="gu"&gt;@@ -28,6 +28,11 @@ RewriteRule ^apps/calendar/caldav.php remote.php/caldav/ [QSA,L]&lt;/span&gt;
    RewriteRule ^apps/contacts/carddav.php remote.php/carddav/ [QSA,L]
    RewriteRule ^apps/([^/]*)/(.*\.(php))$ index.php?app=$1&amp;amp;getfile=$2 [QSA,L]
    RewriteRule ^remote/(.*) remote.php [QSA,L]
&lt;span class="gi"&gt;+&lt;/span&gt;
&lt;span class="gi"&gt;+# webfaction authorization fix for basic authentication&lt;/span&gt;
&lt;span class="gi"&gt;+RewriteCond %{HTTP:Authorization} ^Basic.*&lt;/span&gt;
&lt;span class="gi"&gt;+RewriteRule ^(.*) $1?Authorization=%{HTTP:Authorization} [QSA,C]&lt;/span&gt;
&lt;span class="gi"&gt;+RequestHeader unset Authorization&lt;/span&gt;
    &amp;lt;/IfModule&amp;gt;
    &amp;lt;IfModule mod_mime.c&amp;gt;
    AddType image/svg+xml svg svgz
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;lib/base.php&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gh"&gt;diff --git a/lib/base.php b/lib/base.php&lt;/span&gt;
&lt;span class="gh"&gt;index 3c06cc1..f8fbbf2 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/lib/base.php&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/lib/base.php&lt;/span&gt;
&lt;span class="gu"&gt;@@ -505,6 +505,14 @@ class OC {&lt;/span&gt;
                $_SERVER[&amp;#39;PHP_AUTH_PW&amp;#39;] = strip_tags($password);
            }

&lt;span class="gi"&gt;+               //set http auth headers for Webfaction workaround&lt;/span&gt;
&lt;span class="gi"&gt;+               if(isset($_GET[&amp;#39;Authorization&amp;#39;]) &amp;amp;&amp;amp; preg_match(&amp;#39;/Basic\s+(.*)$/i&amp;#39;, $_GET[&amp;#39;Authorization&amp;#39;], $matches))&lt;/span&gt;
&lt;span class="gi"&gt;+               {&lt;/span&gt;
&lt;span class="gi"&gt;+                       list($name, $password) = explode(&amp;#39;:&amp;#39;, base64_decode($matches[1]));&lt;/span&gt;
&lt;span class="gi"&gt;+                       $_SERVER[&amp;#39;PHP_AUTH_USER&amp;#39;] = strip_tags($name);&lt;/span&gt;
&lt;span class="gi"&gt;+                       $_SERVER[&amp;#39;PHP_AUTH_PW&amp;#39;] = strip_tags($password);&lt;/span&gt;
&lt;span class="gi"&gt;+               }&lt;/span&gt;
&lt;span class="gi"&gt;+&lt;/span&gt;
                self::initPaths();
                if (OC_Config::getValue(&amp;#39;instanceid&amp;#39;, false)) {
                // \OC\Memcache\Cache has a hidden dependency on
&lt;/pre&gt;&lt;/div&gt;</summary><category term="owncloud"></category><category term="php"></category></entry><entry><title>What happens behind the scenes when you browse a webpage over Internet</title><link href="/behind-the-scenes-browsing-webpage.html" rel="alternate"></link><updated>2013-06-07T14:14:00+05:30</updated><author><name>Poomalairaj</name></author><id>tag:,2013-06-07:behind-the-scenes-browsing-webpage.html</id><summary type="html">&lt;h2&gt;Intro&lt;/h2&gt;
&lt;p&gt;I can see that people are very interested to know what happens behind the scenes when they browse a webpage over Internet. Some of my friends keep on asking me to explain the whole process more than one time. Though I found some of the explanations on the Internet, nothing seems to be explaining the process in depth. So, I decided to write my own version. Hope this might help some.&lt;/p&gt;
&lt;p&gt;When you try to explain the background processes that happen when you visit a page, you can explain it with different levels of accuracies. It can be as simple as saying, "Enter a url in the browser and you get the page you want" or it can be a very long blog post. I chose the second option and I will try to cover as much details as I can.&lt;/p&gt;
&lt;h2&gt;Browser&lt;/h2&gt;
&lt;p&gt;Ok, Lets start with web browser. You want to visit the page &lt;code&gt;mozilla.org&lt;/code&gt;. What would you do? That's right, you will type "mozilla.org" in the address bar of the browser and press enter key or the "go" button. If you are using a modern browser, the browser might start to search the past history of urls and shows the urls that match the entered url (Some browsers even matches the title of the past visited pages). Let's assume that you don't use the browser's suggestion and just enter
"mozilla.org" and hit enter key.&lt;/p&gt;
&lt;p&gt;To access a web resource some of the following things are needed.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The protocol - The browser has to speak the language that the server understands&lt;/li&gt;
&lt;li&gt;Unique resource identifier - We need the right address to get the resource otherwise we will not be able to find the "home"&lt;/li&gt;
&lt;li&gt;Port number&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If the supplied address is not a valid domain name or url, then the browser assumes that the provided data is a key word and it might load up a default search engine's page to search the key word we have entered.&lt;/p&gt;
&lt;p&gt;But, we have supplied domain name alone. Now the browser has to assume the rest. 
For the Protocol - Most likely it is going to be "http" for a web resource. So the browser assumes and prepends http:// to the supplied domain name.&lt;/p&gt;
&lt;p&gt;The default port for web servers is &lt;code&gt;80&lt;/code&gt; and the browser uses port 80 for the url.
Now we got a uniform resource identifier "http://mozilla.org:80"&lt;/p&gt;
&lt;h2&gt;Browser proxy (Optional)&lt;/h2&gt;
&lt;p&gt;The browser checks if any proxy server has been set or not before starting any network stack. If a proxy has been set, browser sends all network related requests through the proxy server.&lt;/p&gt;
&lt;h2&gt;Domain name resolution&lt;/h2&gt;
&lt;p&gt;Now that the browser has a url to the page you want to see, it tries to find how to get there. IP address is required to connect to a host. But we only have a url with domain name. Here comes the Domain name servers or most commonly known as DNS servers for help.
DNS server is a database of domain name to ip address mapping and vice versa. We can give the DNS server the domain name and ask IP address or provide IP address and ask for the domain name. There are different levels of &lt;code&gt;name service&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Browser DNS cache&lt;/li&gt;
&lt;li&gt;OS DNS cache&lt;/li&gt;
&lt;li&gt;Local DNS server cache (Optional)&lt;/li&gt;
&lt;li&gt;Router DNS cache&lt;/li&gt;
&lt;li&gt;ISP DNS cache&lt;/li&gt;
&lt;li&gt;Root DNS server cache&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;First the browser checks the browser's own dns cache to see if it can resolve the ip address from the domain name itself. But browser's domain name cache is shortlived (2-30 mins).&lt;/p&gt;
&lt;p&gt;If it fails, browser uses a system call to ask the Operating system if it can resolve the ip address. Before searching the OS DNS cache, the operating system will check with the &lt;code&gt;hosts&lt;/code&gt; file. If the domain name is defined there, that ip address will be returned. If not, the OS will search its own DNS cache.&lt;/p&gt;
&lt;p&gt;When OS cache fails, the operating system asks the DNS server set in the OS. The DNS server set in the OS can be a local DNS server or the Internet Service Provider's DNS server. If the local DNS cache fails, It will ask the ISP's DNS server&lt;/p&gt;
&lt;p&gt;If the ISP's DNS cache fails, it will ask the Root DNS servers.&lt;/p&gt;
&lt;p&gt;If Root DNS server also fails, that means that there is no such domain name exists. If Root DNS server responds with the IP address, all the other DNS servers that didn't have the mapping before will cache it and forward to the previous one. i.e., ISP's DNS, Local DNS, OS DNS, Browser DNS cache the ip mapping and return the ip address to the browser. Modern webservers might have more than one IP for redundancy.&lt;/p&gt;
&lt;h2&gt;Server Not found&lt;/h2&gt;
&lt;p&gt;When a domain name can not be resolved to an ip address, browser should tell the user that the server could not be found.
Every browser has its own way of saying this error. Basically the browser loads a html page that communicate the user that the server could not be found and shows a short message what could be the possible reasons.&lt;/p&gt;
&lt;h2&gt;HTTP request&lt;/h2&gt;
&lt;p&gt;The browser got the IP address of the domain name and now it's time to send HTTP request to the server responsible for mozilla.org.
An HTTP request typically contains the following&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The server name&lt;/li&gt;
&lt;li&gt;HTTP method&lt;/li&gt;
&lt;li&gt;protocol and version&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But there can be more information sent to the server. A typical http request to mozilla.org looks like this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;http://mozilla.org/

GET / HTTP/1.1
Host: mozilla.org
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:20.0) Gecko/20100101 Firefox/20.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Cookie: __utma=150903082.669815343.1368174869.1370597045.1370603010.4; __utmz=150903082.1370597045.3.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); __utmb=150903082.5.10.1370603010; __utmc=150903082
Connection: keep-alive
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This request shows that &lt;code&gt;http://mozilla.org/&lt;/code&gt; is the server name. Notice the trailing slash at the end of the url. This says that the root page is requested. When we don't mention the actual page/resource in the url, it is assumed that the root page is asked. This is typically the home page of the website.&lt;/p&gt;
&lt;p&gt;GET is the http method the browser use to get the data. There are more HTTP methods (or verbs technically) available in HTTP protocol. See wikipedia article on &lt;a href="http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol" title="Hypertext Transfer Protocol"&gt;HTTP protocol and HTTP request methods&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;User agent is the signature of browser. Accept header says that the browser is able to interpret html and xml formatted data. Accept-Language says the language the browser understands, Accpet-encoding is the one that informs the server that the browser is capable of decompressing data compressed with gzip and deflate algorithms.&lt;/p&gt;
&lt;p&gt;The browser also sends the cookies for the domain if it is already set. There can be more headers depending the on the browsers.&lt;/p&gt;
&lt;p&gt;Now this request headers are sent to mozilla.org server's ip address previously resolved with the DNS server.&lt;/p&gt;
&lt;h2&gt;Request's travel&lt;/h2&gt;
&lt;p&gt;The request originates from a port port of the user's computer and based on Operating system's gateway settings, it reaches the internet modem or router. If there is any firewall system present in the computer the firewall audits the request before sending it to the gateway. The router has its &lt;code&gt;public ip&lt;/code&gt; and this ip is used as the user's ip address. The router sends the request through the internet service provider. There can be firewalls and content moderation systems present at
router and the ISP. Once the request passes through ISP successfully, it goes through various routers and reaches mozilla.org's server.&lt;/p&gt;
&lt;p&gt;Again there can be firewalls at mozilla.org and the request should pass through that. The actualy server responsible for the domain mozilla.org can be a &lt;a href="http://en.wikipedia.org/wiki/Reverse_proxy"&gt;reverse proxy&lt;/a&gt; or a &lt;a href="http://en.wikipedia.org/wiki/Load_balancer"&gt;load balancer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The load balancer or the reverse proxy might add or strip one or more components of the request headers. Then the load balancer will send the request to one of the backend servers that is responsible based on the availability of the backend server or just based on round robin scheduling. &lt;/p&gt;
&lt;h2&gt;At the backend server&lt;/h2&gt;
&lt;p&gt;Now the request reaches the actual backend server that is responsible for the actual content. The web server runs at the backend machine reads the request and based on the type of the resource requested, it loads up the appropriate request handler. If the requested content is just a plain html or static content, the web server loads the file from hard disk and generates the response headers and appends the actual content and sends the response back to the browser.&lt;/p&gt;
&lt;h3&gt;Redirects&lt;/h3&gt;
&lt;p&gt;If the requested resource is located somewhere else, the browser may choose to send a redirect response to the browser. The browser has to request the new location again to get the content.&lt;/p&gt;
&lt;p&gt;In out case the response is as follows&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;HTTP/1.1 301 Moved Permanently
Server: Apache
X-Backend-Server: bedrock3.webapp.phx1.mozilla.com
Content-Type: text/html; charset=iso-8859-1
Date: Fri, 07 Jun 2013 11:04:28 GMT
Location: http://www.mozilla.org/
Keep-Alive: timeout=5, max=997
Content-Length: 231
Connection: Keep-Alive
X-Cache-Info: cached
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This response header says that the content you request has been moved permanently and you can find it at &lt;code&gt;Location: http://www.mozilla.org/&lt;/code&gt;. The server also states about itself such as the name of the server is Apache, Name of the backend server is &lt;code&gt;bedrock3.webapp.phx1.mozilla.com&lt;/code&gt;. The content is formatted as html, length of the content etc. There can be non-standard http response headers present. These headers start with &lt;code&gt;X-&lt;/code&gt;. This is may be used by client side scripting
languages or by the browser itself.&lt;/p&gt;
&lt;p&gt;Now the browser knows where to get the content (&lt;code&gt;http://www.mozilla.org/&lt;/code&gt;). Note the &lt;code&gt;www&lt;/code&gt; prefix to the url. This is called 'subdomain'. Browser does the whole process similar to the one that is done so far and sends a request to http://www.mozilla.org/.&lt;/p&gt;
&lt;p&gt;The request looks something like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;http://www.mozilla.org/

GET / HTTP/1.1
Host: www.mozilla.org
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:20.0) Gecko/20100101 Firefox/20.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Cookie: __utma=150903082.669815343.1368174869.1370597045.1370603010.4; csrftoken=a90293d39b7f8d4a520a7f9d7e8ac4e3; __utmz=150903082.1370597045.3.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); __utmb=150903082.5.10.1370603010; __utmc=150903082
Connection: keep-alive
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Server side scripting or CGI&lt;/h2&gt;
&lt;p&gt;Now that the browser has found the right url to request the server (Ah... at last!) the server loads up the handler for the request. Let's assume that this request needs to get some data from a database. The server itself may not be able to access the database directly. For this purpose it loads a server side scripting language or a &lt;a href="http://en.wikipedia.org/wiki/Common_Gateway_Interface"&gt;CGI&lt;/a&gt; program to do the job.&lt;/p&gt;
&lt;p&gt;Server side scripting language such as php, python, ruby or java understands the request and connects to the database. Executes the query to get the relevant data and formats the data as HTML so that the browser can understand it and render. In some cases such as web services, the content is formatted as XML or json. Once the content generation is done, proper response headers are added to the response and the content is appended in the reponse body. Additional headers such as cookies
are added. Now the server takes the control
and optionally adds or removes one or more response headers. The response is sent to the load balancer or reverse proxy. The reverse proxy or the load balancer might add or remove some of the response headers such as cache status, time to live etc.&lt;/p&gt;
&lt;p&gt;The content may optionally be compressed based on the request headers from browser. At any time if the front end server or back end server feels that the requested content is not available, it responds with a 404 error.
There can be more http response codes that can be sent to the browser such as server error, not found header, redirect header etc.&lt;/p&gt;
&lt;h2&gt;Back to browser&lt;/h2&gt;
&lt;p&gt;Now the content is ready and the response is sent to the user's ip address where the router is. The response travels back to many hops at various hosts and reaches ISP's server and then to the user's router. The router sends the response to the appropriate machine. Again at ISP or at router or at user's machine, firewall may check the content and based on the rules, it allows or denies the data.&lt;/p&gt;
&lt;p&gt;Once the response data is back to browser, the browser starts to decompress the content if it is already compressed by the server. The decompressed content is parsed based on the content type. Let's say that it is HTML. The html is parsed and &lt;a href="http://en.wikipedia.org/wiki/Document_object_model"&gt;DOM&lt;/a&gt; tree is generated by the browser.&lt;/p&gt;
&lt;p&gt;Then the browser analyzes for the additional resources to be loaded. Additional resource can be CSS, Javascript, images, videos, audios or other objects. Again http requests are sent to load these additional resources.&lt;/p&gt;
&lt;h2&gt;Rendering&lt;/h2&gt;
&lt;p&gt;Once all resources are loaded, the browser starts to evaluate javascript using the built-in javascirpt engine. CSS styles are applied using layout engine. The layout engine starts to "paint" the actual content. HTML tables, buttons, widgets, images and videos are rendered.&lt;/p&gt;
&lt;p&gt;Ha... Page is ready now.&lt;/p&gt;
&lt;h2&gt;Final thoughts&lt;/h2&gt;
&lt;p&gt;I have tried my best to put together all the pieces in place. There can be inaccuracies and I might have missed something. Comments and improvements are welcome. I think a flow diagram explaining this process can be very helpful. For now I am not going to do that.&lt;/p&gt;</summary><category term="internet"></category><category term="web"></category></entry><entry><title>SSH login without a password</title><link href="/ssh-login-without-password.html" rel="alternate"></link><updated>2013-06-03T06:40:00+05:30</updated><author><name>Poomalairaj</name></author><id>tag:,2013-06-03:ssh-login-without-password.html</id><summary type="html">&lt;h3&gt;SSH login&lt;/h3&gt;
&lt;p&gt;Many a times, we don't want to type a passowrd to login to a remote host through ssh. There can be many reasons not to enter a password in ssh login. This include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Don't want to remember password&lt;/li&gt;
&lt;li&gt;Managing many hosts and entering password is a tedious task&lt;/li&gt;
&lt;li&gt;Need more security than a password&lt;/li&gt;
&lt;li&gt;Need to use ssh in a shell script&lt;/li&gt;
&lt;li&gt;Don't want to enter password in a version control system that use ssh as transport&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Typically when you want to connect to a host using ssh, you would do something similar to the following&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ ssh alice@wonderland.com
The authenticity of host &amp;#39;wonderland.com (111.222.333.444)&amp;#39; can&amp;#39;t be established.
RSA key fingerprint is 83:51:02:f3:ee:9b:02:00:ee:bb:dd:65:86:05:07:85.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added &amp;#39;wonderland.com,111.222.333.444&amp;#39; (RSA) to the list of known hosts.
alice@wonderland.com&amp;#39;s password:
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The very first time, ssh will ask your permission to save RSA key finger print of the host. Subsequent logins will use the finger print to make sure that we are connecting to the right host. When the identity of the host is changed, ssh will warn you that the finger print isn't matching.&lt;/p&gt;
&lt;h3&gt;Create ssh keys&lt;/h3&gt;
&lt;p&gt;we can make use of ssh keys and ssh config to make ssh login process easier and more secure. &lt;code&gt;ssh-keygen&lt;/code&gt; generates asymmetric key pair that can be used for ssh authentication.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ ssh-keygen -t rsa
Generating public/private rsa key pair.
Enter file in which to save the key (/home/alice/.ssh/id_rsa): 
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in /home/alice/.ssh/id_rsa.
Your public key has been saved in /home/alice/.ssh/id_rsa.pub.
The key fingerprint is:
83:51:02:f3:ee:9b:02:00:ee:bb:dd:65:86:05:07:85 alice@alice-laptop
The key&amp;#39;s randomart image is:
+--[ RSA 2048]----+
|   .o. .o        |
|    .. ...       |
|  . ..=.  + .    |
|   o oo+ o +     |
|    o  .s. .o.   |
|     .  . + +.   |
|         o + .   |
|          . F    |
|                 |
+-----------------+
$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This command will create a key pair (private key &lt;code&gt;id_rsa&lt;/code&gt; and public key &lt;code&gt;id_rsa.pub&lt;/code&gt;) in &lt;code&gt;/home/alice/.ssh/&lt;/code&gt;.
You can use dsa or rsa1 in the place of rsa to select encryption algorithm type to create keys. While creating keys, &lt;code&gt;ssh-keygen&lt;/code&gt; will ask you to set a passphrase for the key. When a passphrase is set to the key, the key can not be used if the passphrase is unknown. This passphrase is not the password of the ssh login. This is exclusively set for the generated key. This adds more security to the ssh login. Even if someone get the key, they can not login to the server if the passphrase of
the key is unknown. You might want to create a key with empty passphrase for password less key based ssh login. This can be done by merely hitting enter key when passphrase is prompted.&lt;/p&gt;
&lt;h3&gt;Add public key to the ssh server&lt;/h3&gt;
&lt;p&gt;Now it's time to add the generated public key to the ssh server's &lt;code&gt;authorized_keys&lt;/code&gt; file. This can be done using the following commands&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; cat ~/.ssh/id_rsa.pub | ssh alice@wonderland.com &lt;span class="s1"&gt;&amp;#39;cat &amp;gt;&amp;gt; ~/.ssh/authorized_keys&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;alice@wonderland.com&amp;#39;s password:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This command should copy the generated rsa public key to authorized_keys file of the user alice at the wonderland.com server.
You can also use &lt;code&gt;ssh-copy-id&lt;/code&gt; command to copy the public key to the server.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; ssh-copy-id -i ~/.ssh/id_rsa.pub alice@wonderland.com
&lt;span class="go"&gt;alice@wonderland.com&amp;#39;s password:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We will check if we can login to the server using the private key.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; ssh alice@wonderland.com -i ~/.ssh/id_rsa
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This command should let us login to the ssh host wonderland.com without a password. (A passphrase may be prompeted if you have set one for the ssh private key). There is not need to add the option &lt;code&gt;-i ~/.ssh/id_rsa&lt;/code&gt; because the the default action is to use a key &lt;code&gt;id_rsa&lt;/code&gt; of &lt;code&gt;id_dsa&lt;/code&gt; if present in &lt;code&gt;~/.ssh&lt;/code&gt;. The -i argument can be useful if you have more than one private key. You can create many private keys for many ssh hosts and save them in .ssh directory.&lt;/p&gt;
&lt;h3&gt;SSH config&lt;/h3&gt;
&lt;p&gt;There are many options can be used with ssh login. Some of these options are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ssh port (-p 22)&lt;/li&gt;
&lt;li&gt;ssh private key path (-i ~/.ssh/&lt;name of the key&gt;)&lt;/li&gt;
&lt;li&gt;ssh host name&lt;/li&gt;
&lt;li&gt;ssh host address / ip&lt;/li&gt;
&lt;li&gt;ssh user name&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These options can be added in a config file at user's .ssh directory. By using ssh config file, we can manage multiple hosts with different settings for each.&lt;/p&gt;
&lt;p&gt;A sample ssh config file looks something like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;Host&lt;/span&gt; wl 
&lt;span class="nb"&gt;HostName&lt;/span&gt; wonderland.com
&lt;span class="nb"&gt;User&lt;/span&gt; alice
&lt;span class="nb"&gt;IdentityFaconfile&lt;/span&gt; &lt;span class="sx"&gt;/home/alice/.ssh/id_rsa_wonderland.com&lt;/span&gt;
&lt;span class="nb"&gt;IdentitiesOnly&lt;/span&gt; yes

&lt;span class="nb"&gt;Host&lt;/span&gt; ml 
&lt;span class="nb"&gt;HostName&lt;/span&gt; magicland.com
&lt;span class="nb"&gt;User&lt;/span&gt; bob
&lt;span class="nb"&gt;IdentityFile&lt;/span&gt; &lt;span class="sx"&gt;/home/alice/.ssh/id_rsa_magicland.com&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When you use an ssh config above, you can login using one of the commands below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; ssh wl
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This command will use user name &lt;code&gt;alice&lt;/code&gt; to the host name &lt;code&gt;wonderland.com&lt;/code&gt; with private identity key file &lt;code&gt;/home/alice/.ssh/id_rsa_wonderland.com&lt;/code&gt;. Handy isn't it?&lt;/p&gt;
&lt;p&gt;Want to copy a file to wonderland.com? Its easy with scp&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; scp ~/myfile.txt wl:~/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;See, no need to type the user name, host address and password. Just use the ssh host name wherever you need to use ssh login.
This can apply to git clone as well. Consider that a git repo &lt;code&gt;land.git&lt;/code&gt; in wonderland.com's home directory. To clone this using ssh protocol, use the following command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git clone wl:~/land.git .
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This command should clone the git repo &lt;code&gt;land.git&lt;/code&gt; at wonderland.com without asking you a password. After cloning the repo, pulling and pushing should use the ssh config and hence it won't ask you a password.&lt;/p&gt;
&lt;p&gt;Use of ssh key has another advantage that you don't have to worry even if the unix password of the ssh user is changed in the server. When you use ssh key, it will login to the server just fine.&lt;/p&gt;
&lt;p&gt;Note: It is highly recommeded to delete the public key from your work station to avoid someone else stealing the public key. When someone get the public key, they can make you believe that their server is wonderland.com. When someone gets the private key, they can use it to login to wonderland.com.&lt;/p&gt;
&lt;h3&gt;Security notes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Always protect .ssh directory with permissions 600.&lt;/li&gt;
&lt;li&gt;Delete ssh public key once it is copied to the remote host.&lt;/li&gt;
&lt;li&gt;Don't share the ssh public and private key.&lt;/li&gt;
&lt;li&gt;Use passphrase for the private ssh key whenever possible.&lt;/li&gt;
&lt;li&gt;Always check the remote host if ssh complains that the key finger print is mismatching.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="ssh"></category><category term="linux"></category></entry><entry><title>N900 not booting</title><link href="/n900-not-booting.html" rel="alternate"></link><updated>2012-04-17T19:52:00+05:30</updated><author><name>Poomalairaj</name></author><id>tag:,2012-04-17:n900-not-booting.html</id><summary type="html">&lt;h3&gt;N900 not booting : I almost bricked my phone. No initfs \o/&lt;/h3&gt;
&lt;p&gt;Yesterday I messed with easy debian chroot on my N900 so, I deleted the easy debian image and copied fresh one to my N900. When I was trying to install phpmyadmin in easydebian, suddenly N900 turned off and then rebooted. It was stuck at showing five dots animation splash screen foreaver and never loads desktop. I tried to reboot, remove battery and inserted again. Still my N900 not booting.&lt;/p&gt;
&lt;p&gt;&lt;img alt="N900 Booting" src="/static/img/n900-booting.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;As a last resort, I tried to flash N900. Flashing went well but still the problem was there. I thought I bricked my N900. My wife will kill me if I ask another N900. :(&lt;/p&gt;
&lt;p&gt;Then I found cpitchford’s notes on nokia forum. He hinted to turn on R&amp;amp;D mode of N900.
So I did the following…&lt;/p&gt;
&lt;h3&gt;Enable R&amp;amp;D mode in N900&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Switch off the phone&lt;/li&gt;
&lt;li&gt;Press and hold “U” button on the keyboard&lt;/li&gt;
&lt;li&gt;insert usb cable on N900 and insert other end to PC&lt;/li&gt;
&lt;li&gt;Let go the “U” key once you see Nokia logo and USB icon on the top right corner&lt;/li&gt;
&lt;li&gt;Now open a commnad prompt and enter following command to turn on the R&amp;amp;D mode&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;sudo flasher-3.5 --enable-rd-mode&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Once the flasher completes that, remove usb cable and reboot the phone&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;cpitchford’s said it should boot now. But mine didn’t. But it provided me an important information. It said &lt;strong&gt;No initfs \o/&lt;/strong&gt; while turning on the phone. So it seems initfs is missing on the phone. The initfs actually resides in EMMC. Oh my god. If I flash EMMC, I will lose all my data… again…! :(&lt;/p&gt;
&lt;p&gt;Okay. There is no better option now. I have to flash EMMC. To do that I following steps from 1 to 4 and then entered the following commands&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;flasher&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;3.5&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt; &lt;span class="n"&gt;RX&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;51&lt;/span&gt;&lt;span class="n"&gt;_2009SE_20&lt;/span&gt;&lt;span class="mf"&gt;.2010.36&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;_PR_COMBINED_MR0_ARM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;flasher&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;3.5&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt; &lt;span class="n"&gt;RX&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;51&lt;/span&gt;&lt;span class="n"&gt;_2009SE_10&lt;/span&gt;&lt;span class="mf"&gt;.2010.13&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="n"&gt;VANILLA_PR_EMMC_MR0_ARM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;First command flashes the OS and the second one flashes Emmc and create the lost initfs again. After the second command finish its job, the device will reboot.
Again the five dots animation… But wait… yay, My N900 boots normally and the mighty hildon desktop is loaded successfully.&lt;/p&gt;
&lt;p&gt;Somebody said in forum that, &lt;strong&gt;There is no such thing as bricked N900 as long as there is not physical or component damage&lt;/strong&gt;. It is true. Again I have to install all the stuff again. sigh…&lt;/p&gt;
&lt;p&gt;I will update in another blog post about the settings I usually do after flashing N900.&lt;/p&gt;</summary><category term="n900"></category></entry></feed>